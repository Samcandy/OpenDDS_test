# -*- Makefile -*-
#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file GNUmakefile.ishapes
#
# $Id: gnu.mpd 2866 2016-09-08 21:53:48Z huangh $
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = GNUmakefile.ishapes
DEPENDENCY_FILE  = .depend.ishapes

IDL_DEPENDENCY_FILE1 = .depend.ishapes_Idl1
IDL_DEPENDENCY_FILE2 = .depend.ishapes_Idl2

IDL_DEPENDENCY_FILES += \
	.depend.ishapes_Idl1 \
	.depend.ishapes_Idl2
BIN_UNCHECKED    = ishapes

LIB_PREFIX      ?= lib

TAO_ROOT  ?= $(ACE_ROOT)/TAO

FILES = \
  ishape_qrc.cpp \
  ShapeTypeTypeSupportImpl.cpp \
  ShapeTypeS.cpp \
  ShapeTypeC.cpp \
  ShapeTypeTypeSupportS.cpp \
  ShapeTypeTypeSupportC.cpp \
  BouncingShapeDynamics.cpp \
  Circle.cpp \
  DDSShapeDynamics.cpp \
  FilterDialog.cpp \
  FilterDialog_moc.cpp \
  main.cpp \
  ReaderQosDialog.cpp \
  ReaderQosDialog_moc.cpp \
  Shape.cpp \
  ShapeDynamics.cpp \
  ShapesDialog.cpp \
  ShapesDialog_moc.cpp \
  ShapesWidget.cpp \
  ShapesWidget_moc.cpp \
  Square.cpp \
  Triangle.cpp \
  WriterQosDialog.cpp \
  WriterQosDialog_moc.cpp

IDL_DEPS_FLAGS1 = -DGEN_IDL_MAKE_DEPS
IDL_DEPS1 = ShapeTypeTypeSupport.idl

IDL_DEPS_FLAGS2 = -DGEN_IDL_MAKE_DEPS
IDL_DEPS2 = ShapeType.idl



LIBPATHS := . "$(ACE_ROOT)/lib" "../../../lib" "$(QTDIR)/lib" "$(BOOST_ROOT)/lib"

#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------
LDLIBS = -lOpenDDS_Rtps_Udp -lOpenDDS_Rtps -lOpenDDS_Multicast -lOpenDDS_Udp -lOpenDDS_Tcp -lOpenDDS_InfoRepoDiscovery -lOpenDDS_Dcps -lTAO_BiDirGIOP -lTAO_PI -lTAO_CodecFactory -lTAO_PortableServer -lTAO_AnyTypeCode -lTAO -lACE -lQtGui$(QT_CFG) -lQtCore$(QT_CFG)
TAO_IDL = $(ACE_ROOT)/bin/tao_idl
TAO_IDL_DEP = $(ACE_ROOT)/bin/tao_idl$(EXEEXT)
TAO_IDLFLAGS = -Wb,pre_include=ace/pre.h -Wb,post_include=ace/post.h -I$(TAO_ROOT)$(if $(ARCH), -g $(call ADD_QUOTE,$(call ADD_ARCH,$(ACE_ROOT)/bin/ace_gperf)))

PRJ_TYPE = rtp

ifeq ($(INSBIN),.)
  ifeq ($(CURDIR),)
    ifeq ($(PWD),)
      PWD=$(shell pwd)
    endif
  else
    PWD=$(CURDIR)
  endif
  INSBIN = $(PWD)
endif
OUTPUT_DIRECTORY = $(if $(ARCH),./$(ARCH))

include $(ACE_ROOT)/include/makeinclude/wrapper_macros.GNU

include $(DDS_ROOT)/rules.dds.GNU

include $(TAO_ROOT)/rules.tao.GNU

GNUACE_PROJECT_VERSION ?= $(ACE_VERSION)

# To build multiple targets in the same directory on AIX, it works
# best to have a template directory per project.
# The compiler/linker isn't too smart about instantiating templates...
ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/ishapes
all: $(TEMPINCDIR)
endif

ifneq ($(OUTPUT_DIRECTORY),)
.PHONY: create_output_directory.local
all: create_output_directory.local
create_output_directory.local:
	-@$(MKDIR) "$(OUTPUT_DIRECTORY)" $(ACE_NUL_STDERR)
endif

# turn off libcheck if doing a dry run
ifeq ($(findstring n, $(MAKEFLAGS)),n)
  LIBCHECK = 1
else
  # turn off libcheck if keep going was passed too
  ifeq ($(findstring k, $(MAKEFLAGS)),k)
    LIBCHECK = 1
  else
    LIBCHECK ?= $(filter-out $(foreach lib,OpenDDS_Rtps_Udp OpenDDS_Rtps OpenDDS_Multicast OpenDDS_Udp OpenDDS_Tcp OpenDDS_InfoRepoDiscovery OpenDDS_Dcps TAO_BiDirGIOP TAO_PI TAO_CodecFactory TAO_PortableServer TAO_AnyTypeCode TAO ACE,$(findstring $(lib),$(foreach libpath,. $(if $(ARCH),./$(ARCH)) $(ACE_ROOT)/lib $(if $(ARCH),$(ACE_ROOT)/lib/$(ARCH)) ../../../lib $(if $(ARCH),../../../lib/$(ARCH)) $(QTDIR)/lib $(if $(ARCH),$(QTDIR)/lib/$(ARCH)) $(BOOST_ROOT)/lib $(if $(ARCH),$(BOOST_ROOT)/lib/$(ARCH)) /usr/lib /usr/lib64 $(INSLIB),$(wildcard $(libpath)/$(LIB_PREFIX)$(lib).* $(libpath)/$(lib).lib)))),OpenDDS_Rtps_Udp OpenDDS_Rtps OpenDDS_Multicast OpenDDS_Udp OpenDDS_Tcp OpenDDS_InfoRepoDiscovery OpenDDS_Dcps TAO_BiDirGIOP TAO_PI TAO_CodecFactory TAO_PortableServer TAO_AnyTypeCode TAO ACE)
    ifeq ($(LIBCHECK),)
      LIBCHECK = 1
    endif
  endif
endif
ifeq ($(qt4),1)
ifeq ($(boost),1)
ifeq ($(boost),1)
ifeq ($(LIBCHECK), 1)
BIN    = $(BIN_UNCHECKED)$(EXEEXT)
ifdef ARCH
  ARCH_BIN = $(ARCH)/$(BIN)
endif #ARCH
else
  all: lib_warning
endif
else
  all: require_warning
endif
else
  all: require_warning
endif
else
  all: require_warning
endif

# If it contains ../ at all use notdir.
OBJS   = $(foreach var, $(addsuffix .$(OBJEXT), $(basename $(FILES)) $(RESOURCES)), $(if $(findstring ../,$(var)),$(notdir $(var)),$(var)))
SRC    = $(FILES)

include $(ACE_ROOT)/include/makeinclude/macros.GNU
include $(ACE_ROOT)/include/makeinclude/rules.common.GNU
include $(ACE_ROOT)/include/makeinclude/rules.nonested.GNU

ifneq ($(INSBIN),)
ifneq ($(INSBIN),.)
  INSTALL = $(VBIN:%=$(INSBIN)/%)
  CLEANUP_INSTALL += $(CLEANUP_BIN:%=$(INSBIN)/$(if $(ARCH),$(ARCH)/)%$(VAR)$(EXEEXT))
endif
endif

include $(ACE_ROOT)/include/makeinclude/rules.local.GNU
ifeq ($(VXWORKSLINK),1)
include $(TGT_DIR)/h/make/rules.$(PRJ_TYPE)
endif

ifeq ($(VXWORKSLINK),1)
LDLIBPATH     = -L. -L$(ACE_ROOT)/lib -L../../../lib -L$(QTDIR)/lib -L$(BOOST_ROOT)/lib
else
LDFLAGS      += -L. $(if $(ARCH),-L./$(ARCH)) -L$(ACE_ROOT)/lib $(if $(ARCH),-L$(ACE_ROOT)/lib/$(ARCH)) -L../../../lib $(if $(ARCH),-L../../../lib/$(ARCH)) -L$(QTDIR)/lib $(if $(ARCH),-L$(QTDIR)/lib/$(ARCH)) -L$(BOOST_ROOT)/lib $(if $(ARCH),-L$(BOOST_ROOT)/lib/$(ARCH))
endif
CPPFLAGS     += -I$(ACE_ROOT) -I$(TAO_ROOT) -I../../.. -I $(QTDIR)/include -I$(BOOST_ROOT)/include/$(BOOST_VERSION) -I$(BOOST_ROOT)/. -I.
ifeq ($(static_libs),1)
  CPPFLAGS += -DACE_AS_STATIC_LIBS -DTAO_AS_STATIC_LIBS
  ifeq ($(link_groups), 1)
    LDLIBS := -Wl,--start-group $(LDLIBS) -Wl,--end-group
  endif
endif

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
lib_warning:
	@echo ishapes will not be built due to the following missing library: $(LIBCHECK) >&2

ifneq ($(qt4),1)
requires_disabled_macros += qt4
endif
ifneq ($(boost),1)
requires_disabled_macros += boost
endif
ifneq ($(boost),1)
requires_disabled_macros += boost
endif
require_warning:
	@echo ishapes will not be built due to the following disabled make macros: $(requires_disabled_macros)>&2

## Some OS's have /bin/test others only have /usr/bin/test
ifeq ($(wildcard /bin/test), /bin/test)
  TEST_EXE = /bin/test
else
ifeq ($(wildcard /usr/bin/test), /usr/bin/test)
  TEST_EXE = /usr/bin/test
endif
endif

SPACE = $(should_be_unset) $(should_be_unset)
DYLD_LIBRARY_PATH := $(DYLD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
LD_LIBRARY_PATH   := $(LD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
SHLIB_PATH        := $(SHLIB_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
LIBPATH           := $(LIBPATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
PATH              := $(PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))

GENERATED_DIRTY += ShapeTypeTypeSupportC.inl ShapeTypeTypeSupportC.h ShapeTypeTypeSupportS.h ShapeTypeTypeSupportS.cpp ShapeTypeTypeSupportC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "ShapeTypeTypeSupport.idl" -nt "ShapeTypeTypeSupportC.inl" 2> /dev/null || $(TEST_EXE) "ShapeTypeTypeSupport.idl" -nt "ShapeTypeTypeSupportC.h" 2> /dev/null || $(TEST_EXE) "ShapeTypeTypeSupport.idl" -nt "ShapeTypeTypeSupportS.h" 2> /dev/null || $(TEST_EXE) "ShapeTypeTypeSupport.idl" -nt "ShapeTypeTypeSupportS.cpp" 2> /dev/null || $(TEST_EXE) "ShapeTypeTypeSupport.idl" -nt "ShapeTypeTypeSupportC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "ShapeTypeTypeSupportC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "ShapeTypeTypeSupportC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "ShapeTypeTypeSupportS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "ShapeTypeTypeSupportS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "ShapeTypeTypeSupportC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "ShapeTypeTypeSupportC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "ShapeTypeTypeSupportC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "ShapeTypeTypeSupportS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "ShapeTypeTypeSupportS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "ShapeTypeTypeSupportC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "ShapeTypeTypeSupportC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "ShapeTypeTypeSupportC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "ShapeTypeTypeSupportS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "ShapeTypeTypeSupportS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "ShapeTypeTypeSupportC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
ShapeTypeTypeSupportC.inl ShapeTypeTypeSupportC.h ShapeTypeTypeSupportS.h ShapeTypeTypeSupportS.cpp ShapeTypeTypeSupportC.cpp: ShapeTypeTypeSupport.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -Sa -St -I../../.. ShapeTypeTypeSupport.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
ShapeTypeTypeSupportC.inl ShapeTypeTypeSupportC.h ShapeTypeTypeSupportS.h ShapeTypeTypeSupportS.cpp ShapeTypeTypeSupportC.cpp: $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))) $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT)))
endif
endif

GENERATED_DIRTY += ShapeTypeC.inl ShapeTypeC.h ShapeTypeS.h ShapeTypeS.cpp ShapeTypeC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "ShapeType.idl" -nt "ShapeTypeC.inl" 2> /dev/null || $(TEST_EXE) "ShapeType.idl" -nt "ShapeTypeC.h" 2> /dev/null || $(TEST_EXE) "ShapeType.idl" -nt "ShapeTypeS.h" 2> /dev/null || $(TEST_EXE) "ShapeType.idl" -nt "ShapeTypeS.cpp" 2> /dev/null || $(TEST_EXE) "ShapeType.idl" -nt "ShapeTypeC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "ShapeTypeC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "ShapeTypeC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "ShapeTypeS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "ShapeTypeS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "ShapeTypeC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "ShapeTypeC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "ShapeTypeC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "ShapeTypeS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "ShapeTypeS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "ShapeTypeC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "ShapeTypeC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "ShapeTypeC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "ShapeTypeS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "ShapeTypeS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "ShapeTypeC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
ShapeTypeC.inl ShapeTypeC.h ShapeTypeS.h ShapeTypeS.cpp ShapeTypeC.cpp: ShapeType.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -Sa -St -I../../.. ShapeType.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
ShapeTypeC.inl ShapeTypeC.h ShapeTypeS.h ShapeTypeS.cpp ShapeTypeC.cpp: $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))) $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT)))
endif
endif

DYLD_LIBRARY_PATH := $(DYLD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
LD_LIBRARY_PATH   := $(LD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
SHLIB_PATH        := $(SHLIB_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
LIBPATH           := $(LIBPATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
PATH              := $(PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))

GENERATED_DIRTY += ShapeTypeTypeSupport.idl ShapeTypeTypeSupportImpl.h ShapeTypeTypeSupportImpl.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "ShapeType.idl" -nt "ShapeTypeTypeSupport.idl" 2> /dev/null || $(TEST_EXE) "ShapeType.idl" -nt "ShapeTypeTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "ShapeType.idl" -nt "ShapeTypeTypeSupportImpl.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "ShapeTypeTypeSupport.idl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "ShapeTypeTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "ShapeTypeTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../dds/idl/IDLTemplate.txt)" -nt "ShapeTypeTypeSupport.idl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../dds/idl/IDLTemplate.txt)" -nt "ShapeTypeTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../dds/idl/IDLTemplate.txt)" -nt "ShapeTypeTypeSupportImpl.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
ShapeTypeTypeSupport.idl ShapeTypeTypeSupportImpl.h ShapeTypeTypeSupportImpl.cpp: ShapeType.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(OPENDDS_IDL_DEP))) $(call ADD_ARCH,../../../dds/idl/IDLTemplate.txt)
	$(if $(findstring ",$(OPENDDS_IDL)),$(OPENDDS_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(OPENDDS_IDL)))) -Sa -St ShapeType.idl


GENERATED_DIRTY += ui_readerQosForm.h
OBJS_DEPEND_ON_GENERATED = 1
ui_readerQosForm.h: readerQosForm.ui
	$(if $(findstring ",$(QTDIR)/bin/uic),$(QTDIR)/bin/uic,$(call ADD_QUOTE,$(call ADD_ARCH,$(QTDIR)/bin/uic)))  readerQosForm.ui -o $@


GENERATED_DIRTY += ui_writerQosForm.h
OBJS_DEPEND_ON_GENERATED = 1
ui_writerQosForm.h: writerQosForm.ui
	$(if $(findstring ",$(QTDIR)/bin/uic),$(QTDIR)/bin/uic,$(call ADD_QUOTE,$(call ADD_ARCH,$(QTDIR)/bin/uic)))  writerQosForm.ui -o $@


GENERATED_DIRTY += ui_qosForm.h
OBJS_DEPEND_ON_GENERATED = 1
ui_qosForm.h: qosForm.ui
	$(if $(findstring ",$(QTDIR)/bin/uic),$(QTDIR)/bin/uic,$(call ADD_QUOTE,$(call ADD_ARCH,$(QTDIR)/bin/uic)))  qosForm.ui -o $@


GENERATED_DIRTY += ui_filterForm.h
OBJS_DEPEND_ON_GENERATED = 1
ui_filterForm.h: filterForm.ui
	$(if $(findstring ",$(QTDIR)/bin/uic),$(QTDIR)/bin/uic,$(call ADD_QUOTE,$(call ADD_ARCH,$(QTDIR)/bin/uic)))  filterForm.ui -o $@


GENERATED_DIRTY += ui_iShapesForm.h
OBJS_DEPEND_ON_GENERATED = 1
ui_iShapesForm.h: iShapesForm.ui
	$(if $(findstring ",$(QTDIR)/bin/uic),$(QTDIR)/bin/uic,$(call ADD_QUOTE,$(call ADD_ARCH,$(QTDIR)/bin/uic)))  iShapesForm.ui -o $@


GENERATED_DIRTY += FilterDialog_moc.cpp
FilterDialog_moc.cpp: FilterDialog.hpp
	$(if $(findstring ",$(QTDIR)/bin/moc),$(QTDIR)/bin/moc,$(call ADD_QUOTE,$(call ADD_ARCH,$(QTDIR)/bin/moc)))  FilterDialog.hpp -o $@


GENERATED_DIRTY += ReaderQosDialog_moc.cpp
ReaderQosDialog_moc.cpp: ReaderQosDialog.hpp
	$(if $(findstring ",$(QTDIR)/bin/moc),$(QTDIR)/bin/moc,$(call ADD_QUOTE,$(call ADD_ARCH,$(QTDIR)/bin/moc)))  ReaderQosDialog.hpp -o $@


GENERATED_DIRTY += ShapesDialog_moc.cpp
ShapesDialog_moc.cpp: ShapesDialog.hpp
	$(if $(findstring ",$(QTDIR)/bin/moc),$(QTDIR)/bin/moc,$(call ADD_QUOTE,$(call ADD_ARCH,$(QTDIR)/bin/moc)))  ShapesDialog.hpp -o $@


GENERATED_DIRTY += ShapesWidget_moc.cpp
ShapesWidget_moc.cpp: ShapesWidget.hpp
	$(if $(findstring ",$(QTDIR)/bin/moc),$(QTDIR)/bin/moc,$(call ADD_QUOTE,$(call ADD_ARCH,$(QTDIR)/bin/moc)))  ShapesWidget.hpp -o $@


GENERATED_DIRTY += WriterQosDialog_moc.cpp
WriterQosDialog_moc.cpp: WriterQosDialog.hpp
	$(if $(findstring ",$(QTDIR)/bin/moc),$(QTDIR)/bin/moc,$(call ADD_QUOTE,$(call ADD_ARCH,$(QTDIR)/bin/moc)))  WriterQosDialog.hpp -o $@


GENERATED_DIRTY += ishape_qrc.cpp
ishape_qrc.cpp: ishape.qrc
	$(if $(findstring ",$(QTDIR)/bin/rcc),$(QTDIR)/bin/rcc,$(call ADD_QUOTE,$(call ADD_ARCH,$(QTDIR)/bin/rcc))) -name ishape ishape.qrc -o $@


ifneq ($(GENERATED_DIRTY),)
.PRECIOUS: $(GENERATED_DIRTY)
## If the generated files are anything but source files, we need to
## ensure that those files are generated before we attempt to build anything
## else.
ifeq ($(OBJS_DEPEND_ON_GENERATED),1)
$(VDIR)$(ACE_PCH_FILE) $(addprefix $(VDIR), $(OBJS)): $(GENERATED_DIRTY)
$(VSHDIR)$(ACE_PCH_FILE) $(VSHOBJS): $(GENERATED_DIRTY)
endif
endif

ADDITIONAL_IDL_TARGETS += ShapeTypeTypeSupport$(IDL_CLIENT_HDR_EXT) ShapeType$(IDL_CLIENT_HDR_EXT)
idl_stubs: $(ADDITIONAL_IDL_TARGETS)

# This assignment forces make to run the idl_stubs
# target before building any of the source files.
FORCED_IDL_STUBS = ishape_qrc.cpp ShapeTypeTypeSupportImpl.cpp ShapeTypeS.cpp ShapeTypeC.cpp ShapeTypeTypeSupportS.cpp ShapeTypeTypeSupportC.cpp BouncingShapeDynamics.cpp Circle.cpp DDSShapeDynamics.cpp FilterDialog.cpp FilterDialog_moc.cpp main.cpp ReaderQosDialog.cpp ReaderQosDialog_moc.cpp Shape.cpp ShapeDynamics.cpp ShapesDialog.cpp ShapesDialog_moc.cpp ShapesWidget.cpp ShapesWidget_moc.cpp Square.cpp Triangle.cpp WriterQosDialog.cpp WriterQosDialog_moc.cpp  
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:ShapeTypeTypeSupportS.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:ShapeTypeTypeSupportC.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:ShapeTypeS.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:ShapeTypeC.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:ShapeTypeTypeSupportImpl.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:FilterDialog_moc.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:ReaderQosDialog_moc.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:ShapesDialog_moc.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:ShapesWidget_moc.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:WriterQosDialog_moc.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:ishape_qrc.cpp=)

ifneq ($(FORCED_IDL_STUBS),)
$(FORCED_IDL_STUBS): idl_stubs
endif

ifneq ($(VXWORKSLINK),1)
ifeq ($(static_libs_only), 1)
  ifeq ($(use_dep_libs), 1)
    DEPLIBS = $(foreach lib, OpenDDS_Rtps_Udp OpenDDS_Rtps OpenDDS_Multicast OpenDDS_Udp OpenDDS_Tcp OpenDDS_InfoRepoDiscovery OpenDDS_Dcps TAO_BiDirGIOP TAO_PI TAO_CodecFactory TAO_PortableServer TAO_AnyTypeCode TAO ACE "QtGui$(QT_CFG)" QtCore$(QT_CFG), $(foreach libpath, . $(ACE_ROOT)/lib ../../../lib $(QTDIR)/lib $(BOOST_ROOT)/lib, $(wildcard $(libpath)/$(LIB_PREFIX)$(lib).$(LIBEXT))))
  endif
endif

$(VBIN): $(addprefix $(VDIR), $(OBJS)) $(DEPLIBS)
  ifneq (,$(LINK.cc.override))
	$(LINK.cc.override)
  else
	$(LINK.cc) $(LDFLAGS) $(CC_OUTPUT_FLAG) $@ $(filter-out %.a,$^) $(VLDLIBS) $(POSTLINK)
  endif
endif

incremental_depend_idl::
	@$(RM) $(IDL_DEPENDENCY_FILE1)_idl.old
	@cp $(IDL_DEPENDENCY_FILE1) $(IDL_DEPENDENCY_FILE1)_idl.old
	$(DEPGEN_ENV) $(DEPGEN) -A $(DEPEND_CMD_ARGS) -f $(IDL_DEPENDENCY_FILE1) \
	$(IDL_DEPS_FLAGS1) -t gnuidl -DMAKEDEPEND $(IDL_DEPS1)
	@if cmp -s $(IDL_DEPENDENCY_FILE1) $(IDL_DEPENDENCY_FILE1)_idl.old ;\
	then echo "GNUmakefile idl dependencies unchanged for $(IDL_DEPS1)." ;\
	else \
		echo "GNUmakefile idl dependencies updated for $(IDL_DEPS1)." ;\
	fi ;\
	$(RM) $(IDL_DEPENDENCY_FILE1)_idl.old ;
	@$(RM) $(IDL_DEPENDENCY_FILE2)_idl.old
	@cp $(IDL_DEPENDENCY_FILE2) $(IDL_DEPENDENCY_FILE2)_idl.old
	$(DEPGEN_ENV) $(DEPGEN) -A $(DEPEND_CMD_ARGS) -f $(IDL_DEPENDENCY_FILE2) \
	$(IDL_DEPS_FLAGS2) -t gnuidl -DMAKEDEPEND $(IDL_DEPS2)
	@if cmp -s $(IDL_DEPENDENCY_FILE2) $(IDL_DEPENDENCY_FILE2)_idl.old ;\
	then echo "GNUmakefile idl dependencies unchanged for $(IDL_DEPS2)." ;\
	else \
		echo "GNUmakefile idl dependencies updated for $(IDL_DEPS2)." ;\
	fi ;\
	$(RM) $(IDL_DEPENDENCY_FILE2)_idl.old ;

realclean: clean
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif

__prebuild__:
ifeq ($(qt4),1)
ifeq ($(boost),1)
ifeq ($(boost),1)
	@-:
endif
endif
endif


.PHONY: install
install: all
INSTALL_LIB ?= lib
ifneq ($(INSTALL_PREFIX),)
ifneq ($(install_rpath),0)
LDFLAGS += -Wl,-R$(INSTALL_PREFIX)/$(INSTALL_LIB) $(LD_RPATH_FLAGS)
endif
endif


